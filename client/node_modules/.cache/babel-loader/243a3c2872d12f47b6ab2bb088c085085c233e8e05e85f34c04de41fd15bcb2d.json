{"ast":null,"code":"var _jsxFileName = \"F:\\\\Coding\\\\MERN\\\\client\\\\src\\\\pages\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport API from '../api';\nimport MessageList from '../components/MessageList';\nimport { connectSocket, getSocket, disconnectSocket } from '../socket';\nimport Sidebar from '../components/Sidebar';\nimport ChatWindow from '../components/ChatWindow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chat() {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [selected, setSelected] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [text, setText] = useState('');\n  const me = JSON.parse(localStorage.getItem('user') || 'null');\n  const pollingRef = useRef(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (!me) return;\n    API.get('/api/users').then(res => setUsers(res.data)).catch(() => {});\n    // connect socket and set presence\n    const s = connectSocket();\n    s.emit('presence', {\n      userId: me._id\n    });\n    s.on('message', msg => {\n      // if message is for selected or for current user, refresh\n      if (selected && (msg.roomId === selected._id || msg.from === selected._id || msg.to === selected._id)) {\n        fetchMessages();\n      }\n      // else you could show a badge/notification\n    });\n    return () => {\n      // cleanup\n      s.off('message');\n    };\n  }, []);\n  useEffect(() => {\n    if (!selected) return;\n    fetchMessages();\n    pollingRef.current = setInterval(fetchMessages, 3000);\n    return () => clearInterval(pollingRef.current);\n  }, [selected]);\n  useEffect(() => {\n    return () => {\n      disconnectSocket();\n    };\n  }, []);\n  const fetchMessages = async () => {\n    try {\n      const res = await API.get('/api/messages/' + selected._id);\n      setMessages(res.data);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  const send = async e => {\n    e.preventDefault();\n    if (!text.trim() || !selected) return;\n    try {\n      const body = {\n        to: selected._id,\n        content: text\n      };\n      const res = await API.post('/api/messages', body);\n      // emit via socket for live update\n      const s = getSocket();\n      if (s) s.emit('sendMessage', res.data);\n      setText('');\n      fetchMessages();\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  const logout = () => {\n    // stop polling\n    if (pollingRef.current) clearInterval(pollingRef.current);\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    navigate('/login');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-page\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      me: me,\n      users: users,\n      selected: selected,\n      onSelect: setSelected,\n      onLogout: logout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n      selected: selected,\n      messages: messages,\n      currentUserId: me === null || me === void 0 ? void 0 : me._id,\n      text: text,\n      setText: setText,\n      send: send\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"rmlrql7mhQnqPhnXR2Z5Dczxdqc=\", false, function () {\n  return [useNavigate];\n});\n_c = Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useNavigate","API","MessageList","connectSocket","getSocket","disconnectSocket","Sidebar","ChatWindow","jsxDEV","_jsxDEV","Chat","_s","users","setUsers","selected","setSelected","messages","setMessages","text","setText","me","JSON","parse","localStorage","getItem","pollingRef","navigate","get","then","res","data","catch","s","emit","userId","_id","on","msg","roomId","from","to","fetchMessages","off","current","setInterval","clearInterval","err","console","error","send","e","preventDefault","trim","body","content","post","logout","removeItem","className","children","onSelect","onLogout","fileName","_jsxFileName","lineNumber","columnNumber","currentUserId","_c","$RefreshReg$"],"sources":["F:/Coding/MERN/client/src/pages/Chat.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport API from '../api';\r\nimport MessageList from '../components/MessageList';\r\nimport { connectSocket, getSocket, disconnectSocket } from '../socket';\r\nimport Sidebar from '../components/Sidebar';\r\nimport ChatWindow from '../components/ChatWindow';\r\n\r\nexport default function Chat(){\r\n  const [users, setUsers] = useState([]);\r\n  const [selected, setSelected] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [text, setText] = useState('');\r\n  const me = JSON.parse(localStorage.getItem('user') || 'null');\r\n  const pollingRef = useRef(null);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(()=>{\r\n    if (!me) return;\r\n    API.get('/api/users').then(res => setUsers(res.data)).catch(()=>{});\r\n    // connect socket and set presence\r\n    const s = connectSocket();\r\n    s.emit('presence', { userId: me._id });\r\n    s.on('message', msg => {\r\n      // if message is for selected or for current user, refresh\r\n      if (selected && (msg.roomId === selected._id || msg.from === selected._id || msg.to === selected._id)){\r\n        fetchMessages();\r\n      }\r\n      // else you could show a badge/notification\r\n    });\r\n    return ()=>{\r\n      // cleanup\r\n      s.off('message');\r\n    };\r\n  },[]);\r\n\r\n  useEffect(()=>{\r\n    if (!selected) return;\r\n    fetchMessages();\r\n    pollingRef.current = setInterval(fetchMessages, 3000);\r\n    return ()=> clearInterval(pollingRef.current);\r\n  },[selected]);\r\n\r\n  useEffect(()=>{\r\n    return ()=>{ disconnectSocket(); }\r\n  },[]);\r\n\r\n  const fetchMessages = async () => {\r\n    try{\r\n      const res = await API.get('/api/messages/' + selected._id);\r\n      setMessages(res.data);\r\n    }catch(err){ console.error(err); }\r\n  }\r\n\r\n  const send = async e => {\r\n    e.preventDefault();\r\n    if (!text.trim() || !selected) return;\r\n    try{\r\n        const body = { to: selected._id, content: text };\r\n        const res = await API.post('/api/messages', body);\r\n        // emit via socket for live update\r\n        const s = getSocket();\r\n        if (s) s.emit('sendMessage', res.data);\r\n        setText('');\r\n        fetchMessages();\r\n    }catch(err){ console.error(err); }\r\n  }\r\n\r\n  const logout = ()=>{\r\n    // stop polling\r\n    if (pollingRef.current) clearInterval(pollingRef.current);\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    navigate('/login');\r\n  }\r\n\r\n  return (\r\n    <div className=\"chat-page\">\r\n      <Sidebar\r\n        me={me}\r\n        users={users}\r\n        selected={selected}\r\n        onSelect={setSelected}\r\n        onLogout={logout}\r\n      />\r\n      <ChatWindow\r\n        selected={selected}\r\n        messages={messages}\r\n        currentUserId={me?._id}\r\n        text={text}\r\n        setText={setText}\r\n        send={send}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}